"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateRunID = void 0;
/* eslint-disable sort-imports */
const core = __importStar(require("@actions/core"));
const axios_1 = __importDefault(require("axios"));
const defaultCaseId = 936;
function getRunName() {
    const date = new Date();
    return `Automated Test Run ${date.getDay()}/${date.getMonth()}/${date.getFullYear()}`;
}
function getTestRailConfg(path, method) {
    const host = core.getInput('testrail_host');
    const username = core.getInput('testrail_username');
    const password = core.getInput('testrail_password');
    const config = {
        method: method || 'GET',
        headers: {
            'Content-Type': 'application/json'
        },
        url: `${host}/${path}`,
        withCredentials: true,
        auth: {
            username,
            password
        }
    };
    return config;
}
function checkIfRunNameExist(runs, name) {
    return (runs || []).find(runInfo => runInfo.name.toLowerCase() === name.toLowerCase());
}
function updateRunName(run) {
    const splitted = run.name.split(' - ');
    let nIndex = 1;
    if (splitted.length > 1) {
        // get the last index value to increase one
        nIndex = Number(splitted[1]) + 1;
        // update the name to the first part
        run.name = splitted[0];
    }
    run.name = `${run.name} - ${nIndex}`;
    return run;
}
function getOrCreateRunID() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const projectId = core.getInput('testrail_projectid');
            const response = yield getRuns(projectId);
            core.notice('GET THE LIST OF RUNs');
            core.debug(JSON.stringify(response));
            const runName = getRunName();
            core.notice('Create the run name');
            core.notice(`Run name ${runName}`);
            let match = checkIfRunNameExist(response.runs, runName);
            core.notice('Creck if exist');
            core.notice(JSON.stringify(match));
            if (match && (match === null || match === void 0 ? void 0 : match.is_completed) === true) {
                match = updateRunName(match);
                core.notice(`Update run name: ${match.name}`);
            }
            if (!match || (match === null || match === void 0 ? void 0 : match.is_completed) === true) {
                core.notice('Not match found');
                const suiteId = core.getInput('testrail_suidId');
                core.notice(`Print suite id ${suiteId}`);
                const runResponse = yield addRun(projectId, {
                    name: runName,
                    description: `This run was autogenerated by the GH Action for automatic regretion.`,
                    suite_id: suiteId,
                    case_ids: [defaultCaseId],
                    include_all: false
                });
                core.notice('Create the runId and update the match');
                core.notice(JSON.stringify(runResponse));
                match = {
                    name: runResponse.name,
                    id: runResponse.id
                };
            }
            return match;
        }
        catch (error) {
            core.setFailed(error);
        }
    });
}
exports.getOrCreateRunID = getOrCreateRunID;
function getRuns(projectId) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = getTestRailConfg(`get_runs/${projectId}`);
        const response = yield axios_1.default.request(config);
        return response.data;
    });
}
function addRun(projectId, runInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = getTestRailConfg(`add_run/${projectId}`, 'POST');
        config.data = runInfo;
        const runResponse = yield axios_1.default.request(config);
        return runResponse.data;
    });
}
